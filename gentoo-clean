#!/usr/bin/env python
# Gentoo cleaning script
import subprocess, shutil, os, sys

# Nice colored logs
def paint(color, text, bold=1):
    return f"\033[{0+bold};{color+30};40m\033[49m{text}\033[0m"

def info(text, func=print, func_args={}):
    return func(f"[{paint(2, '*')}] {text}", **func_args)

def warning(text, func=print, func_args={}):
    return func(f"[{paint(3, '!')}] {text}", **func_args)

def error(text, func=print, func_args={}):
    return func(f"[{paint(1, 'x')}] {paint(1, 'error')}: {text}", **func_args)

# System checks

# Check if system is Gentoo Linux
isGentoo = False
if sys.platform=="linux":
    if os.path.exists("/etc/os-release"):
        lines = open("/etc/os-release").read().split("\n")
        for line in lines:
            if line:
                try:
                    line = line.split("=")
                    if line[0]=="NAME" and line[1]=="Gentoo":
                        isGentoo = True
                except:
                    pass
if not isGentoo:
    error("This script is only for Gentoo Linux")
    exit(1)

# Root user check
if os.geteuid()!=0:
    error("Run this as root")
    exit(1)

# Main clean function
def clean(folderpath, files, infotext):
    if files!=[]:
        if warning(f"Clean {folderpath}? (y/n): ", func=input).lower()=="y":
            info(f"{infotext} from {folderpath}")
            for file in files:
                filepath = os.path.join(folderpath, file)
                try:
                    if os.path.isfile(filepath):
                        os.remove(filepath)
                    elif os.path.isdir(filepath):
                        shutil.rmtree(filepath)
                    print(f"    > {filepath}")
                except PermissionError as p:
                    error(f"{p}")
                    exit(1)
    else:
        info(f"{folderpath} is clean!")

# /boot
# Get current kernel name
current_kernel = subprocess.check_output(["uname", "-r"]).decode().split("\n")[0]
oldkernels = []
# Find old kernel files
for file in os.listdir("/boot"):
    if any([i in file for i in ("config-", "initramfs-",
                                "vmlinuz-", "System.map-")]):
        if current_kernel not in file:
            oldkernels.append(file)
clean("/boot", oldkernels, "Cleaning old kernels")

# /var/tmp/portage
portage_tmp = os.listdir("/var/tmp/portage")
clean("/var/tmp/portage", portage_tmp, "Cleaning portage cache")

# /var/tmp/genkernel
genkernel_tmp = os.listdir("/var/tmp/genkernel")
clean("/var/tmp/genkernel", genkernel_tmp, "Cleaning genkernel cache")
